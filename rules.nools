
define User {


    nb_partners:0,
    capital: 0,
    activity: null,
    ca: 0,


    constructor: function(nb_partners,capital,activity, ca) {
        this.nb_partners=nb_partners;
        this.capital=capital;
        this.activity= activity;
        this.ca=ca;

    }

}

define Status_law {

    name: null,
    constructor: function(name) {
        this.name = name;
    }
}


define Activity {

    name: null,
    constructor: function(name) {
        this.name= name;
    }
}


rule EURL {

    when {

        u: User u.nb_partners == 1;


    } then {

        var s= new Status_law("EURL");
        console.log(s.name);
        assert(s);

    }
}


rule SASU {

    when {

        u: User u.nb_partners == 1;

    } then {

        var s= new Status_law("SASU");
        console.log(s.name);
        assert(s);
    }
}


rule SARL {

    when {

        not(u: User u.nb_partners< 2);
        not(u: User u.nb_partners> 100);


    } then {

        var s= new Status_law("SARL");
        console.log(s.name);
        assert(s);
    }
}



rule SAS {

    when {

        not( u: User u.nb_partners<2);

    } then {

        var s= new Status_law("SAS");
        console.log(s.name);
        assert(s);
    }
}

rule SA {

    when {

        not(u: User u.nb_partners >7);
        not(c: User c.capital <37000);



    } then {

        var s= new Status_law("SA");
        console.log(s.name);
        assert(s);
    }
}
rule EI {

    when {

        u: User u.nb_partners == 0;

    } then {

        var s= new Status_law("EI");
        console.log(s.name);
        assert(s);
    }
}


rule EIRL {

    when {

        u: User u.nb_partners == 0;

    } then {

        var s= new Status_law("EIRL");
        console.log(s.name);
        assert(s);
    }
}


rule Entreprenor {

    when {

        u: User u.nb_partners == 0;

    } then {

        var s= new Status_law("Entreprenor");
        console.log(s.name);
        assert(s);
    }
}

rule autoCommercial {

    when {

        u: User u.ca <= 81500 && u.activity == "commerciale";

    } then {

        var a = new Activity("autoCommerciale");
        console.log(a.name);
        assert(a);

    }

}

rule SocieteCommercial {

    when {
        u: User u.ca >= 81500 &&  u.activity == "commerciale";

    }then {

        var a = new Activity("societeCommerciale");
        console.log(a.name);
        assert(a);


    }

}


rule autoArtisanale {

    when {

        u: User u.ca <=32600 && u.activity == "artisanale";

    }then {

        var a = new Activity("autoArtisanale");
        console.log(a.name);
        assert(a);

     }


}


rule autoLiberale {

    when {

        u: User u.ca <=32600 && u.activity == "liberale";

    }then {

        var a = new Activity("autoLiberale");
        console.log(a.name);
        assert(a);

     }


}


rule societeCivile {

    when {

        or(
            u: User u.activity == "liberale",
            u: User u.activity == "artisanale",
            u: User u.activity == "agricole",
        );

        not( u: User u.nb_partners<2);

    }then {

        var a = new Activity("societeCivile");
        console.log(a.name);
        assert(a);

     }

}


rule SCP{

     when {

        a: Activity a.name == "societe civile";
        u: User u.activity == "liberale";
        not( u: User u.nb_partners<2);

    }then {

        var a = new Activity("groupeliberal");
        console.log(a.name);
        assert(a);

     }

}


rule GAEC{

     when {

        a: Activity a.name == "societe civile";
        u: User u.activity == "agricole" && u.capital >= 1500;

    }then {

        var a = new Activity("groupeAgriculteur");
        console.log(a.name);
        assert(a);
     }
}



rule EARL{

     when {

        a: Activity a.name == "societe civile";
        u: User u.capital >= 7500 && u.activity == "agricole";
        not( u: User u.nb_partners<1);
        not( u: User u.nb_partners >10);

    }then {

        var a = new Activity("exploitationAgricole");
        console.log(a.name);
        assert(a);

     }

}
